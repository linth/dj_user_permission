"""
Django settings for dj_user_permission project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-#di&vn61zw+9iwm**i9+2^uguck$sw+l(mw293zmwcx49xfg6-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'users',
    'custom_users',
    'gen_faker_data',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'dj_user_permission.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dj_user_permission.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# REST_FRAMEWORK
# IsAuthenticated, IsAdminUser, IsAuthenticatedOrReadOnly
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        # 'rest_framework.permissions.IsAuthenticated',
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer', # 提供api返回json資料
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# AUTH_USER_MODEL = "users.CustomUser" # for users.


# LOGGING
# https://qchoice.medium.com/django-logging%E8%A7%A3%E6%9E%90-5244c3dc8157
import rich
# https://stackoverflow.com/questions/1285372/how-does-one-make-logging-color-in-django-google-app-engine
import rich.theme

this_theme = rich.theme.Theme({
    'logging.level.info': 'bold magenta',
})
rich.reconfigure(theme=this_theme)

LOGGING = {
    'version': 1, 
    'disable_existing_loggers': False, # 是否取消使用內建的Loggers
    'formatters': {
        # 用於紀錄的格式，可以想像成模板
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'rich': {
            'datefmt': '[%X]'
        }
    },
    'handlers': {
        # 用於處理紀錄，可以對訊息做不同的處理
        'console': {
            # show all information.
            "class": "rich.logging.RichHandler",
            "formatter": "rich",
            "level": "DEBUG",
        },
        # 'verbose': {
        #     'level': 'DEBUG',
        #     'class': 'logging.StreamHandler',
        #     'formatter': 'verbose',
        # },
        # 'simple': {
        #     'level': 'INFO',
        #     # 'class': 'logging.StreamHandler',
        #     'class': 'rich.logging.RichHandler',
        #     'formatter': 'rich'
        # },
        # 'debug_file': {
        #     # access debug information into info.log
        #     'level': 'DEBUG',
        #     'class': 'logging.FileHandler',
        #     'filename': BASE_DIR / 'log/debug.log',
        #     'formatter': 'rich',
        # },
        # 'info_file': {
        #     # access info information into info.log
        #     'level': 'INFO',
        #     'class': 'logging.FileHandler',
        #     'filename': BASE_DIR / 'log/info.log',
        #     'formatter': 'rich',
        # },
        # 'warning_file': {
        #     # access warning information into warning.log
        #     'level': 'WARN',
        #     'class': 'logging.FileHandler',
        #     'filename': BASE_DIR / 'log/warn.log',
        #     'formatter': 'rich',
        # },
        # 'error_file': {
        #     # access error information into warning.log
        #     'level': 'ERROR',
        #     'class': 'logging.FileHandler',
        #     'filename': BASE_DIR / 'log/error.log',
        #     'formatter': 'rich',
        # },
        # 'critical_file': {
        #     # access critical information into warning.log
        #     'level': 'CRITICAL',
        #     'class': 'logging.FileHandler',
        #     'filename': BASE_DIR / 'log/critical.log',
        #     'formatter': 'rich',
        # },
    },
    'loggers': {
        # 用於紀錄，將前面的Handlers及Formatter整合使用
        'my-logging': {
            'handlers': ['console'],  # 'debug_file', 'info_file', 'warning_file', 'error_file', 'critical_file'
            'level': 'DEBUG',
            'propagate': True, # 是否連訊息出現的傳播路徑一同紀錄，
        },
        # 'debug-details': {
        #     'handlers': ['console'], 
        #     'level': 'DEBUG',
        #     'propagate': True
        # },
        # 'debug-verbose': {
        #     'handlers': ['verbose'],
        #     'level': 'DEBUG',
        #     'propagate': True,
        # }
    },
    'filters': {
        # 'special': {
        #     '()': 'project.logging.SpecialFilter',
        #     'foo': 'bar',
        # },
        # 'require_debug_true': {
        #     '()': 'django.utils.log.RequireDebugTrue',
        # },
    }
}
